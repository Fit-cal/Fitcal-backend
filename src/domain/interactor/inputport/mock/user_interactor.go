// Code generated by MockGen. DO NOT EDIT.
// Source: user_interactor_inputport.go

// Package mock_inputport is a generated GoMock package.
package mock_inputport

import (
	entities "fitcal-backend/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInteractorInputPort is a mock of UserInteractorInputPort interface.
type MockUserInteractorInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserInteractorInputPortMockRecorder
}

// MockUserInteractorInputPortMockRecorder is the mock recorder for MockUserInteractorInputPort.
type MockUserInteractorInputPortMockRecorder struct {
	mock *MockUserInteractorInputPort
}

// NewMockUserInteractorInputPort creates a new mock instance.
func NewMockUserInteractorInputPort(ctrl *gomock.Controller) *MockUserInteractorInputPort {
	mock := &MockUserInteractorInputPort{ctrl: ctrl}
	mock.recorder = &MockUserInteractorInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInteractorInputPort) EXPECT() *MockUserInteractorInputPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserInteractorInputPort) CreateUser(query *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserInteractorInputPortMockRecorder) CreateUser(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserInteractorInputPort)(nil).CreateUser), query)
}

// GetUsers mocks base method.
func (m *MockUserInteractorInputPort) GetUsers() (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserInteractorInputPortMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserInteractorInputPort)(nil).GetUsers))
}

// SearchUsers mocks base method.
func (m *MockUserInteractorInputPort) SearchUsers(keyword string) (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", keyword)
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockUserInteractorInputPortMockRecorder) SearchUsers(keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserInteractorInputPort)(nil).SearchUsers), keyword)
}
