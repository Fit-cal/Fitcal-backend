// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository_inputport.go

// Package mock_inputport is a generated GoMock package.
package mock_inputport

import (
	entities "fitcal-backend/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInputPort is a mock of UserRepositoryInputPort interface.
type MockUserRepositoryInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInputPortMockRecorder
}

// MockUserRepositoryInputPortMockRecorder is the mock recorder for MockUserRepositoryInputPort.
type MockUserRepositoryInputPortMockRecorder struct {
	mock *MockUserRepositoryInputPort
}

// NewMockUserRepositoryInputPort creates a new mock instance.
func NewMockUserRepositoryInputPort(ctrl *gomock.Controller) *MockUserRepositoryInputPort {
	mock := &MockUserRepositoryInputPort{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInputPort) EXPECT() *MockUserRepositoryInputPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInputPort) CreateUser(query entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInputPortMockRecorder) CreateUser(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInputPort)(nil).CreateUser), query)
}

// GetUsers mocks base method.
func (m *MockUserRepositoryInputPort) GetUsers() (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryInputPortMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepositoryInputPort)(nil).GetUsers))
}

// SearchUsers mocks base method.
func (m *MockUserRepositoryInputPort) SearchUsers(keyword string) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", keyword)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockUserRepositoryInputPortMockRecorder) SearchUsers(keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserRepositoryInputPort)(nil).SearchUsers), keyword)
}
